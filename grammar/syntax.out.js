/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,10],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[1,11],$V9=[1,12],$Va=[1,17],$Vb=[1,18],$Vc=[1,19],$Vd=[1,20],$Ve=[1,21],$Vf=[1,22],$Vg=[1,23],$Vh=[1,24],$Vi=[1,25],$Vj=[1,26],$Vk=[1,27],$Vl=[1,28],$Vm=[1,29],$Vn=[1,30],$Vo=[1,31],$Vp=[1,32],$Vq=[1,33],$Vr=[1,34],$Vs=[1,35],$Vt=[1,36],$Vu=[1,37],$Vv=[1,38],$Vw=[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,36,38,39,40,41,43,44,45,46],$Vx=[1,74],$Vy=[1,76],$Vz=[5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,25,28,31,32,36,41,43,44,45,46],$VA=[43,45,46];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expression":3,"e":4,"EOF":5,"(":6,")":7,"==":8,"=":9,"!=":10,"<=":11,"<":12,">":13,"||":14,"&&":15,">=":16,"=>":17,"+":18,"-":19,"*":20,"/.":21,"->":22,":>":23,":":24,"/":25,"_":26,"@:_":27,"^":28,"!":29,"@-":30,"@+":31,"@_":32,"VECTOR":33,"MULTISET":34,"ATOM":35,"\"":36,"STRING":37,"IDENTIFIER":38,"LETTER":39,"NUMBER":40,"[":41,"CSL":42,"]":43,"{":44,"}":45,",":46,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"(",7:")",8:"==",9:"=",10:"!=",11:"<=",12:"<",13:">",14:"||",15:"&&",16:">=",17:"=>",18:"+",19:"-",20:"*",21:"/.",22:"->",23:":>",24:":",25:"/",26:"_",27:"@:_",28:"^",29:"!",30:"@-",31:"@+",32:"@_",36:"\"",37:"STRING",38:"IDENTIFIER",39:"LETTER",40:"NUMBER",41:"[",43:"]",44:"{",45:"}",46:","},
productions_: [0,[3,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,3],[4,2],[4,2],[4,2],[4,1],[4,2],[4,1],[4,1],[4,1],[4,3],[4,2],[35,1],[35,1],[35,1],[33,3],[33,3],[33,2],[34,3],[34,3],[34,2],[42,3],[42,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
this.$ = ['(', $$[$0-1]];
break;
case 3: case 4:
this.$ = ['=', $$[$0-2], $$[$0]];
break;
case 5:
this.$ = ['!=', $$[$0-2], $$[$0]];
break;
case 6:
this.$ = ['<=', $$[$0-2], $$[$0]];
break;
case 7:
this.$ = ['<', $$[$0-2], $$[$0]];
break;
case 8:
this.$ = ['>', $$[$0-2], $$[$0]];
break;
case 9:
this.$ = ['||', $$[$0-2], $$[$0]];
break;
case 10:
this.$ = ['&&', $$[$0-2], $$[$0]];
break;
case 11:
this.$ = ['>=', $$[$0-2], $$[$0]];
break;
case 12:
this.$ = ['=>', $$[$0-2], $$[$0]];
break;
case 13:
this.$ = ['+', $$[$0-2], $$[$0]];
break;
case 14:
this.$ = ['+', $$[$0-2], ['*', {number: '-1'}, $$[$0]]];
break;
case 15:
this.$ = ['*', $$[$0-2], $$[$0]];
break;
case 16:
this.$ = ['/.', $$[$0-2], $$[$0]];
break;
case 17:
this.$ = ['->', $$[$0-2], $$[$0]];
break;
case 18:
this.$ = [':>', $$[$0-2], $$[$0]];
break;
case 19:
this.$ = [':', $$[$0-2], $$[$0]];
break;
case 20:
this.$ = ['*', $$[$0-2], ['^', $$[$0], {number: '-1'}]];
break;
case 21:
this.$ = ['_', $$[$0-2], $$[$0]];
break;
case 22:
this.$ = [':', $$[$0-1], ['default', 'Blank', ['[']]];
break;
case 23:
this.$ = ['^', $$[$0-2], $$[$0]];
break;
case 24:
this.$ = ['!', $$[$0-1]];
break;
case 25:
this.$ = ['*', {number: '-1'}, $$[$0]];
break;
case 26:
this.$ = ['+', $$[$0]];
break;
case 27:
this.$ = ['default', 'Blank', ['[']];
break;
case 28:
this.$ = ['default', $$[$0-1], $$[$0]];
break;
case 29: case 30: case 31: case 34: case 35:
this.$ = $$[$0];
break;
case 32:
this.$ = {string: $$[$0-1]};;
break;
case 33:
this.$ = {string: ''};;
break;
case 36:
this.$ = {number: $$[$0]};
break;
case 37:
this.$ = ['['].concat($$[$0-1]);
break;
case 38:
this.$ = ['[', $$[$0-1]];
break;
case 39:
this.$ = ['['];
break;
case 40:
this.$ = ['{'].concat($$[$0-1]);
break;
case 41:
this.$ = ['{', $$[$0-1]];
break;
case 42:
this.$ = ['{'];
break;
case 43:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 44:
this.$ = [$$[$0-2], $$[$0]];
break;
}
},
table: [{3:1,4:2,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{1:[3]},{4:39,5:[1,16],6:$V0,8:$Va,9:$Vb,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:40,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:41,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:42,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},o($Vw,[2,27]),o($Vw,[2,29]),o($Vw,[2,30]),o($Vw,[2,31]),{36:[1,44],37:[1,43]},{4:46,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:45,43:[1,47],44:$V9},{4:49,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,42:48,44:$V9,45:[1,50]},o($Vw,[2,34]),o($Vw,[2,35]),o($Vw,[2,36]),{1:[2,1]},{4:51,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:52,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:53,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:54,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:55,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:56,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:57,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:58,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:59,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:60,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:61,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:62,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:63,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:64,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:65,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:66,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:67,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:68,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},{4:69,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},o($Vw,[2,22]),{4:70,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},o($Vw,[2,24]),o([5,6,7,8,9,18,19,20,21,22,23,25,31,32,41,43,44,45,46],[2,28],{33:7,34:8,35:9,4:39,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,24:$Vq,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$V1,36:$V4,38:$V5,39:$V6,40:$V7}),{4:39,6:$V0,7:[1,71],8:$Va,9:$Vb,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},o([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,28,30,31,32,36,41,43,44,45,46],[2,25],{33:7,34:8,35:9,4:39,24:$Vq,26:$Vs,27:$Vt,29:$Vv,38:$V5,39:$V6,40:$V7}),o([5,7,8,9,18,19,21,22,23,32,43,45,46],[2,26],{33:7,34:8,35:9,4:39,6:$V0,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,20:$Vm,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$V1,31:$V2,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9}),{36:[1,72]},o($Vw,[2,33]),{43:[1,73],46:$Vx},{4:39,6:$V0,8:$Va,9:$Vb,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,43:[1,75],44:$V9,46:$Vy},o($Vw,[2,39]),{45:[1,77],46:$Vx},{4:39,6:$V0,8:$Va,9:$Vb,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9,45:[1,78],46:$Vy},o($Vw,[2,42]),o([5,7,8,9,22,23,43,45,46],[2,3],{33:7,34:8,35:9,4:39,6:$V0,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$V1,31:$V2,32:$V3,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9}),o([5,7,9,22,23,43,45,46],[2,4],{33:7,34:8,35:9,4:39,6:$V0,8:$Va,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$V1,31:$V2,32:$V3,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9}),o([5,6,7,8,9,10,14,15,18,19,20,21,22,23,25,28,31,32,36,41,43,44,45,46],[2,5],{33:7,34:8,35:9,4:39,11:$Vd,12:$Ve,13:$Vf,16:$Vi,17:$Vj,24:$Vq,26:$Vs,27:$Vt,29:$Vv,30:$V1,38:$V5,39:$V6,40:$V7}),o([5,6,7,8,9,10,11,12,14,15,18,19,20,21,22,23,25,28,31,32,36,41,43,44,45,46],[2,6],{33:7,34:8,35:9,4:39,13:$Vf,16:$Vi,17:$Vj,24:$Vq,26:$Vs,27:$Vt,29:$Vv,30:$V1,38:$V5,39:$V6,40:$V7}),o([5,6,7,8,9,10,12,14,15,18,19,20,21,22,23,25,28,31,32,36,41,43,44,45,46],[2,7],{33:7,34:8,35:9,4:39,11:$Vd,13:$Vf,16:$Vi,17:$Vj,24:$Vq,26:$Vs,27:$Vt,29:$Vv,30:$V1,38:$V5,39:$V6,40:$V7}),o([5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23,25,28,31,32,36,41,43,44,45,46],[2,8],{33:7,34:8,35:9,4:39,16:$Vi,17:$Vj,24:$Vq,26:$Vs,27:$Vt,29:$Vv,30:$V1,38:$V5,39:$V6,40:$V7}),o([5,6,7,8,9,14,18,19,20,21,22,23,25,28,31,32,36,41,43,44,45,46],[2,9],{33:7,34:8,35:9,4:39,10:$Vc,11:$Vd,12:$Ve,13:$Vf,15:$Vh,16:$Vi,17:$Vj,24:$Vq,26:$Vs,27:$Vt,29:$Vv,30:$V1,38:$V5,39:$V6,40:$V7}),o([5,6,7,8,9,14,15,18,19,20,21,22,23,25,28,31,32,36,41,43,44,45,46],[2,10],{33:7,34:8,35:9,4:39,10:$Vc,11:$Vd,12:$Ve,13:$Vf,16:$Vi,17:$Vj,24:$Vq,26:$Vs,27:$Vt,29:$Vv,30:$V1,38:$V5,39:$V6,40:$V7}),o($Vz,[2,11],{33:7,34:8,35:9,4:39,17:$Vj,24:$Vq,26:$Vs,27:$Vt,29:$Vv,30:$V1,38:$V5,39:$V6,40:$V7}),o($Vz,[2,12],{33:7,34:8,35:9,4:39,17:$Vj,24:$Vq,26:$Vs,27:$Vt,29:$Vv,30:$V1,38:$V5,39:$V6,40:$V7}),o([5,7,8,9,18,21,22,23,43,45,46],[2,13],{33:7,34:8,35:9,4:39,6:$V0,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,19:$Vl,20:$Vm,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$V1,31:$V2,32:$V3,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9}),o([5,7,8,9,18,19,21,22,23,43,45,46],[2,14],{33:7,34:8,35:9,4:39,6:$V0,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,20:$Vm,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$V1,31:$V2,32:$V3,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9}),o([5,7,8,9,18,19,20,21,22,23,31,32,43,45,46],[2,15],{33:7,34:8,35:9,4:39,6:$V0,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$V1,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9}),o([5,7,8,9,21,22,23,43,45,46],[2,16],{33:7,34:8,35:9,4:39,6:$V0,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$V1,31:$V2,32:$V3,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9}),o([5,7,22,43,45,46],[2,17],{33:7,34:8,35:9,4:39,6:$V0,8:$Va,9:$Vb,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$V1,31:$V2,32:$V3,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9}),o([5,7,22,23,43,45,46],[2,18],{33:7,34:8,35:9,4:39,6:$V0,8:$Va,9:$Vb,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$V1,31:$V2,32:$V3,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9}),o([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,28,30,31,32,36,41,43,44,45,46],[2,19],{33:7,34:8,35:9,4:39,26:$Vs,27:$Vt,29:$Vv,38:$V5,39:$V6,40:$V7}),o([5,7,8,9,18,19,20,21,22,23,25,31,32,43,45,46],[2,20],{33:7,34:8,35:9,4:39,6:$V0,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,24:$Vq,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$V1,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9}),o([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,36,41,43,44,45,46],[2,21],{33:7,34:8,35:9,4:39,38:$V5,39:$V6,40:$V7}),o([5,6,7,8,9,18,19,20,21,22,23,25,28,31,32,36,41,43,44,45,46],[2,23],{33:7,34:8,35:9,4:39,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,24:$Vq,26:$Vs,27:$Vt,29:$Vv,30:$V1,38:$V5,39:$V6,40:$V7}),o($Vw,[2,2]),o($Vw,[2,32]),o($Vw,[2,37]),{4:79,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},o($Vw,[2,38]),{4:80,6:$V0,30:$V1,31:$V2,32:$V3,33:7,34:8,35:9,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9},o($Vw,[2,40]),o($Vw,[2,41]),o($VA,[2,43],{33:7,34:8,35:9,4:39,6:$V0,8:$Va,9:$Vb,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$V1,31:$V2,32:$V3,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9}),o($VA,[2,44],{33:7,34:8,35:9,4:39,6:$V0,8:$Va,9:$Vb,10:$Vc,11:$Vd,12:$Ve,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$V1,31:$V2,32:$V3,36:$V4,38:$V5,39:$V6,40:$V7,41:$V8,44:$V9})],
defaultActions: {16:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}