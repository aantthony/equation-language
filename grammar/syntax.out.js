/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,7],$V5=[1,11],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[1,12],$Va=[1,13],$Vb=[1,18],$Vc=[1,19],$Vd=[1,20],$Ve=[1,21],$Vf=[1,22],$Vg=[1,23],$Vh=[1,24],$Vi=[1,25],$Vj=[1,26],$Vk=[1,27],$Vl=[1,28],$Vm=[1,29],$Vn=[1,30],$Vo=[1,31],$Vp=[1,32],$Vq=[1,33],$Vr=[1,34],$Vs=[1,35],$Vt=[1,36],$Vu=[1,37],$Vv=[1,38],$Vw=[1,39],$Vx=[1,40],$Vy=[1,41],$Vz=[1,42],$VA=[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,40,42,43,44,45,47,48,49,50],$VB=[5,7,8,9,14,15,20,21,24,25,47,49,50],$VC=[1,80],$VD=[1,82],$VE=[5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,26,27,31,34,35,36,40,45,47,48,49,50],$VF=[47,49,50];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expression":3,"e":4,"EOF":5,"(":6,")":7,"==":8,"=":9,"!=":10,"<=":11,"<":12,">":13,"/.":14,"//":15,"||":16,"&&":17,">=":18,"=>":19,"+":20,"-":21,".":22,"*":23,"->":24,":>":25,":":26,"/":27,"_":28,"@:_":29,"@:_.":30,"^":31,"!":32,"@-":33,"@+":34,"@_":35,"@_.":36,"VECTOR":37,"MULTISET":38,"ATOM":39,"\"":40,"STRING":41,"IDENTIFIER":42,"LETTER":43,"NUMBER":44,"[":45,"CSL":46,"]":47,"{":48,"}":49,",":50,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"(",7:")",8:"==",9:"=",10:"!=",11:"<=",12:"<",13:">",14:"/.",15:"//",16:"||",17:"&&",18:">=",19:"=>",20:"+",21:"-",22:".",23:"*",24:"->",25:":>",26:":",27:"/",28:"_",29:"@:_",30:"@:_.",31:"^",32:"!",33:"@-",34:"@+",35:"@_",36:"@_.",40:"\"",41:"STRING",42:"IDENTIFIER",43:"LETTER",44:"NUMBER",45:"[",47:"]",48:"{",49:"}",50:","},
productions_: [0,[3,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,2],[4,3],[4,2],[4,2],[4,2],[4,1],[4,1],[4,2],[4,1],[4,1],[4,1],[4,3],[4,2],[39,1],[39,1],[39,1],[37,3],[37,3],[37,2],[38,3],[38,3],[38,2],[46,3],[46,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
this.$ = ['(', $$[$0-1]];
break;
case 3: case 4:
this.$ = ['=', $$[$0-2], $$[$0]];
break;
case 5:
this.$ = ['!=', $$[$0-2], $$[$0]];
break;
case 6:
this.$ = ['<=', $$[$0-2], $$[$0]];
break;
case 7:
this.$ = ['<', $$[$0-2], $$[$0]];
break;
case 8:
this.$ = ['>', $$[$0-2], $$[$0]];
break;
case 9:
this.$ = ['default', 'ReplaceAll', ['[', $$[$0-2], $$[$0]]];
break;
case 10:
this.$ = ['default', $$[$0], ['[', $$[$0-2]]];
break;
case 11:
this.$ = ['||', $$[$0-2], $$[$0]];
break;
case 12:
this.$ = ['&&', $$[$0-2], $$[$0]];
break;
case 13:
this.$ = ['>=', $$[$0-2], $$[$0]];
break;
case 14:
this.$ = ['=>', $$[$0-2], $$[$0]];
break;
case 15:
this.$ = ['+', $$[$0-2], $$[$0]];
break;
case 16:
this.$ = ['+', $$[$0-2], ['*', {number: '-1'}, $$[$0]]];
break;
case 17: case 18:
this.$ = ['*', $$[$0-2], $$[$0]];
break;
case 19:
this.$ = ['->', $$[$0-2], $$[$0]];
break;
case 20:
this.$ = [':>', $$[$0-2], $$[$0]];
break;
case 21:
this.$ = [':', $$[$0-2], $$[$0]];
break;
case 22:
this.$ = ['*', $$[$0-2], ['^', $$[$0], {number: '-1'}]];
break;
case 23:
this.$ = ['_', $$[$0-2], $$[$0]];
break;
case 24:
this.$ = [':', $$[$0-1], ['default', 'Blank', ['[']]];
break;
case 25:
this.$ = [':', $$[$0-1], ['default', 'Optional', ['[', ['default', 'Blank', ['[']]]]];
break;
case 26:
this.$ = ['^', $$[$0-2], $$[$0]];
break;
case 27:
this.$ = ['!', $$[$0-1]];
break;
case 28:
this.$ = ['*', {number: '-1'}, $$[$0]];
break;
case 29:
this.$ = ['+', $$[$0]];
break;
case 30:
this.$ = ['default', 'Blank', ['[']];
break;
case 31:
this.$ = ['default', 'Optional', ['[', ['default', 'Blank', ['[']]]];
break;
case 32:
this.$ = ['default', $$[$0-1], $$[$0]];
break;
case 33: case 34: case 35: case 38: case 39:
this.$ = $$[$0];
break;
case 36:
this.$ = {string: $$[$0-1]};;
break;
case 37:
this.$ = {string: ''};;
break;
case 40:
this.$ = {number: $$[$0]};
break;
case 41:
this.$ = ['['].concat($$[$0-1]);
break;
case 42:
this.$ = ['[', $$[$0-1]];
break;
case 43:
this.$ = ['['];
break;
case 44:
this.$ = ['{'].concat($$[$0-1]);
break;
case 45:
this.$ = ['{', $$[$0-1]];
break;
case 46:
this.$ = ['{'];
break;
case 47:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 48:
this.$ = [$$[$0-2], $$[$0]];
break;
}
},
table: [{3:1,4:2,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{1:[3]},{4:43,5:[1,17],6:$V0,8:$Vb,9:$Vc,10:$Vd,11:$Ve,12:$Vf,13:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:44,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:45,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:46,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},o($VA,[2,30]),o($VA,[2,31]),o($VA,[2,33]),o($VA,[2,34]),o($VA,[2,35]),{40:[1,48],41:[1,47]},{4:50,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:49,47:[1,51],48:$Va},{4:53,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:52,48:$Va,49:[1,54]},o($VA,[2,38]),o($VA,[2,39]),o($VA,[2,40]),{1:[2,1]},{4:55,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:56,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:57,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:58,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:59,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:60,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:61,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:62,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:63,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:64,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:65,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:66,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:67,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:68,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:69,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:70,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:71,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:72,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:73,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:74,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},{4:75,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},o($VA,[2,24]),o($VA,[2,25]),{4:76,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},o($VA,[2,27]),o([5,6,7,8,9,14,15,20,21,22,23,24,25,27,34,45,47,48,49,50],[2,32],{37:8,38:9,39:10,4:43,10:$Vd,11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk,18:$Vl,19:$Vm,26:$Vt,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,35:$V3,36:$V4,40:$V5,42:$V6,43:$V7,44:$V8}),{4:43,6:$V0,7:[1,77],8:$Vb,9:$Vc,10:$Vd,11:$Ve,12:$Vf,13:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},o([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,31,33,34,35,36,40,45,47,48,49,50],[2,28],{37:8,38:9,39:10,4:43,28:$Vv,29:$Vw,30:$Vx,32:$Vz,42:$V6,43:$V7,44:$V8}),o($VB,[2,29],{37:8,38:9,39:10,4:43,6:$V0,10:$Vd,11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk,18:$Vl,19:$Vm,22:$Vp,23:$Vq,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,34:$V2,35:$V3,36:$V4,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va}),{40:[1,78]},o($VA,[2,37]),{47:[1,79],50:$VC},{4:43,6:$V0,8:$Vb,9:$Vc,10:$Vd,11:$Ve,12:$Vf,13:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,47:[1,81],48:$Va,50:$VD},o($VA,[2,43]),{49:[1,83],50:$VC},{4:43,6:$V0,8:$Vb,9:$Vc,10:$Vd,11:$Ve,12:$Vf,13:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va,49:[1,84],50:$VD},o($VA,[2,46]),o([5,7,8,9,14,15,24,25,47,49,50],[2,3],{37:8,38:9,39:10,4:43,6:$V0,10:$Vd,11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,34:$V2,35:$V3,36:$V4,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va}),o([5,7,9,14,15,24,25,47,49,50],[2,4],{37:8,38:9,39:10,4:43,6:$V0,8:$Vb,10:$Vd,11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,34:$V2,35:$V3,36:$V4,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va}),o([5,6,7,8,9,10,14,15,16,17,20,21,22,23,24,25,26,27,31,34,35,36,40,45,47,48,49,50],[2,5],{37:8,38:9,39:10,4:43,11:$Ve,12:$Vf,13:$Vg,18:$Vl,19:$Vm,28:$Vv,29:$Vw,30:$Vx,32:$Vz,33:$V1,42:$V6,43:$V7,44:$V8}),o([5,6,7,8,9,10,11,12,14,15,16,17,20,21,22,23,24,25,26,27,31,34,35,36,40,45,47,48,49,50],[2,6],{37:8,38:9,39:10,4:43,13:$Vg,18:$Vl,19:$Vm,28:$Vv,29:$Vw,30:$Vx,32:$Vz,33:$V1,42:$V6,43:$V7,44:$V8}),o([5,6,7,8,9,10,12,14,15,16,17,20,21,22,23,24,25,26,27,31,34,35,36,40,45,47,48,49,50],[2,7],{37:8,38:9,39:10,4:43,11:$Ve,13:$Vg,18:$Vl,19:$Vm,28:$Vv,29:$Vw,30:$Vx,32:$Vz,33:$V1,42:$V6,43:$V7,44:$V8}),o([5,6,7,8,9,10,11,12,13,14,15,16,17,20,21,22,23,24,25,26,27,31,34,35,36,40,45,47,48,49,50],[2,8],{37:8,38:9,39:10,4:43,18:$Vl,19:$Vm,28:$Vv,29:$Vw,30:$Vx,32:$Vz,33:$V1,42:$V6,43:$V7,44:$V8}),o([5,7,14,15,47,49,50],[2,9],{37:8,38:9,39:10,4:43,6:$V0,8:$Vb,9:$Vc,10:$Vd,11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,34:$V2,35:$V3,36:$V4,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va}),o([5,7,15,47,49,50],[2,10],{37:8,38:9,39:10,4:43,6:$V0,8:$Vb,9:$Vc,10:$Vd,11:$Ve,12:$Vf,13:$Vg,14:$Vh,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,34:$V2,35:$V3,36:$V4,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va}),o([5,6,7,8,9,14,15,16,20,21,22,23,24,25,26,27,31,34,35,36,40,45,47,48,49,50],[2,11],{37:8,38:9,39:10,4:43,10:$Vd,11:$Ve,12:$Vf,13:$Vg,17:$Vk,18:$Vl,19:$Vm,28:$Vv,29:$Vw,30:$Vx,32:$Vz,33:$V1,42:$V6,43:$V7,44:$V8}),o([5,6,7,8,9,14,15,16,17,20,21,22,23,24,25,26,27,31,34,35,36,40,45,47,48,49,50],[2,12],{37:8,38:9,39:10,4:43,10:$Vd,11:$Ve,12:$Vf,13:$Vg,18:$Vl,19:$Vm,28:$Vv,29:$Vw,30:$Vx,32:$Vz,33:$V1,42:$V6,43:$V7,44:$V8}),o($VE,[2,13],{37:8,38:9,39:10,4:43,19:$Vm,28:$Vv,29:$Vw,30:$Vx,32:$Vz,33:$V1,42:$V6,43:$V7,44:$V8}),o($VE,[2,14],{37:8,38:9,39:10,4:43,19:$Vm,28:$Vv,29:$Vw,30:$Vx,32:$Vz,33:$V1,42:$V6,43:$V7,44:$V8}),o([5,7,8,9,14,15,20,24,25,47,49,50],[2,15],{37:8,38:9,39:10,4:43,6:$V0,10:$Vd,11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk,18:$Vl,19:$Vm,21:$Vo,22:$Vp,23:$Vq,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,34:$V2,35:$V3,36:$V4,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va}),o($VB,[2,16],{37:8,38:9,39:10,4:43,6:$V0,10:$Vd,11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk,18:$Vl,19:$Vm,22:$Vp,23:$Vq,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,34:$V2,35:$V3,36:$V4,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va}),o([5,7,8,9,14,15,20,21,22,23,24,25,34,47,49,50],[2,17],{37:8,38:9,39:10,4:43,6:$V0,10:$Vd,11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk,18:$Vl,19:$Vm,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,35:$V3,36:$V4,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va}),o([5,7,8,9,14,15,20,21,23,24,25,34,47,49,50],[2,18],{37:8,38:9,39:10,4:43,6:$V0,10:$Vd,11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk,18:$Vl,19:$Vm,22:$Vp,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,35:$V3,36:$V4,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va}),o([5,7,14,15,24,47,49,50],[2,19],{37:8,38:9,39:10,4:43,6:$V0,8:$Vb,9:$Vc,10:$Vd,11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,34:$V2,35:$V3,36:$V4,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va}),o([5,7,14,15,24,25,47,49,50],[2,20],{37:8,38:9,39:10,4:43,6:$V0,8:$Vb,9:$Vc,10:$Vd,11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,34:$V2,35:$V3,36:$V4,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va}),o([5,6,7,8,9,14,15,20,21,22,23,24,25,26,27,34,45,47,48,49,50],[2,21],{37:8,38:9,39:10,4:43,10:$Vd,11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk,18:$Vl,19:$Vm,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,35:$V3,36:$V4,40:$V5,42:$V6,43:$V7,44:$V8}),o([5,7,8,9,14,15,20,21,22,23,24,25,27,34,47,49,50],[2,22],{37:8,38:9,39:10,4:43,6:$V0,10:$Vd,11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk,18:$Vl,19:$Vm,26:$Vt,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,35:$V3,36:$V4,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va}),o([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,40,45,47,48,49,50],[2,23],{37:8,38:9,39:10,4:43,42:$V6,43:$V7,44:$V8}),o([5,6,7,8,9,14,15,20,21,22,23,24,25,26,27,31,34,35,36,40,45,47,48,49,50],[2,26],{37:8,38:9,39:10,4:43,10:$Vd,11:$Ve,12:$Vf,13:$Vg,16:$Vj,17:$Vk,18:$Vl,19:$Vm,28:$Vv,29:$Vw,30:$Vx,32:$Vz,33:$V1,42:$V6,43:$V7,44:$V8}),o($VA,[2,2]),o($VA,[2,36]),o($VA,[2,41]),{4:85,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},o($VA,[2,42]),{4:86,6:$V0,33:$V1,34:$V2,35:$V3,36:$V4,37:8,38:9,39:10,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va},o($VA,[2,44]),o($VA,[2,45]),o($VF,[2,47],{37:8,38:9,39:10,4:43,6:$V0,8:$Vb,9:$Vc,10:$Vd,11:$Ve,12:$Vf,13:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,34:$V2,35:$V3,36:$V4,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va}),o($VF,[2,48],{37:8,38:9,39:10,4:43,6:$V0,8:$Vb,9:$Vc,10:$Vd,11:$Ve,12:$Vf,13:$Vg,14:$Vh,15:$Vi,16:$Vj,17:$Vk,18:$Vl,19:$Vm,20:$Vn,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,32:$Vz,33:$V1,34:$V2,35:$V3,36:$V4,40:$V5,42:$V6,43:$V7,44:$V8,45:$V9,48:$Va})],
defaultActions: {17:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}